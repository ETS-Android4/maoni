/*
 * Copyright (c) 2017 Armel Soro
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
final homePath = System.properties['user.home']


apply plugin: 'com.android.library'
apply plugin: "kotlin-android"
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

final VERSION_NAME = maoni_version
final VERSION_CODE = VERSION_NAME.replace('.', '').toInteger()

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28
        versionCode VERSION_CODE
        versionName VERSION_NAME
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
//        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation project(':maoni-common')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'

    implementation 'io.karn:khttp-android:0.1.2'
    implementation "org.jetbrains.anko:anko-sdk27:$anko_version"
}

task generateSourcesJar(type: Jar) {
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    failOnError false
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}

generateJavadocsJar.dependsOn generateJavadocs

artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}

bintray {

    //Attempt to read keystore.properties file, if any first
    final propsFile = new File(homePath.toString() + "/.droid/", "maoni.bintray.properties")

    if (propsFile.exists()) {
        printf("[Bintray] Using properties file located at " + propsFile.absolutePath)
        final props = new Properties()
        props.load(new FileInputStream(propsFile))
        user = props['user']
        key = props['key']
    } else {
        user = ""
        key = ""
    }

    publish = true //If version should be auto published after an upload

    pkg {
        repo = 'maven'
        name = 'org.rm3l:maoni-slack'
        labels = ['maoni', 'android', 'feedback', 'android-lib', 'comments', 'review', 'bug', 'issue']

        //noinspection GroovyAssignabilityCheck
        version {
            name = maoni_version
            desc = 'Maoni Android Library - Slack Handler'
            released = new Date()
            vcsTag = maoni_version
        }

        publicDownloadNumbers = true

        licenses = ['MIT']
        vcsUrl = 'https://github.com/maoni-app/maoni-slack.git'
        websiteUrl = 'https://github.com/maoni-app/maoni-slack'
        issueTrackerUrl = 'https://github.com/maoni-app/maoni-slack/issues'

    }
    configurations = ['archives']
}
